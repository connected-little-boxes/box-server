<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <title>Connected Little Boxes</title>
</head>

<body onload="doStart();">
  <div class="container mb-4">
    <h3 class="mt-2 mb-2">
      <%= name %>
    </h3>
    <h1 class="mb-4">Connected Little Boxes</h1>
    <h2 class="mb-2">Create device</h2>
    <p id="stageDescription"></p>
    <textarea class="logOutput" rows="15" cols="60" id="logOutput"></textarea>
  </div>

  <script src="/js/esptool/ESPManager.js"></script>
  <script src="/js/esptool/ESPToolJS.js"></script>
  <script src="/js/esptool/ESP32.js"></script>
  <script src="/js/esptool/ESP8266.js"></script>
  <script src="/js/esptool/SerialManager.js"></script>
  <script src="/js/esptool/stubs.js"></script>
  <script src="/js/simpleterm/terminal.js"></script>

  <script>

    var device = null;
    var connected = false;
    var terminal = null;
    var stage;
    const stages = {
      ConnectUSB: "ConnectUSB",
      ConnectToDevice: "ConnectToDevice",
      StartFlash: "StartFlash",
      ConnectFailed: "ConnectFailed"
    }

    function displayStage(stage) {

      // clear away the old stage help
      let stageElement = document.getElementById("stageDescription");

      while (stageElement.children.length > 0) {
        stageElement.removeChild(stageElement.children[0]);
      }

      // draw the new stage
      stage.description.forEach(message => {
        let element;
        if (message.startsWith("*")) {
          message = message.slice(1);
          element = document.createElement("h3");
        }
        else {
          element = document.createElement("p");
        }
        element.innerText = message;
        stageElement.appendChild(element);
      });

      let button = document.createElement("button");
      button.className = "btn btn-success mb-4 btn-block";
      button.textContent = stage.buttonText;
      button.addEventListener("click", stage.buttonDest);
      stageElement.appendChild(button);
    }

    function selectStage(newStage) {
      stage = newStage;
      switch (stage) {
        case stages.ConnectUSB:
          displayStage({
            description: ["*Plug into the usb socket",
              `You'll need a usb cable to connect your device to your computer. When you plug it the computer should recognise it automatically and install the drivers. If it doesn't you may have to install them by hand. `,
              `In Windows you can check in Device Manager to make sure that the device is working OK. Click the Windows Start button and search for 'Device' and then select the Device Manager from the menu. If all is well you should see your device appear.`,
              "Press device plugged in when your device is plugged in."],
            buttonText: "Device plugged in",
            buttonDest: doConnectToDevice
          });
          break;
        case stages.ConnectToDevice:
          displayStage({
            description: ["*Connect to device",
              `Next we will connect your device to the browser. Press the Connect Device button below when you are ready.`,
              `A dialog box will pop up inviting you to select a device to program.`,
              "Press Connect to device when you are ready."],
            buttonText: "Connect to device",
            buttonDest: doAttemptConnection
          });
          break;
        case stages.StartFlash:
          displayStage({
            description: ["*Start the flash",
              `Now that you are connected you can start the process.`,
              `Note that this will take a while. The log window will show the progress.`,
              `If the process stops at the 'sync' part this might be because your device has not reset.`,
              `You can try pressing the reset button on your device, reloading this page in your browser and trying again.`,
              `We've not tested the process with every possible ESP device, and some don't respond to our reset signals. However, if you are using a Wemos device it should just work.`,
              "Press Start Flash when you are ready."],
            buttonText: "Start Flash",
            buttonDest: doStartFlash
          });
          break;
        case stages.ConnectFailed:
          displayStage({
            description: ["*Connect failed",
              `The connection to your device seems to have failed`,
              `Make sure that it is connected correctly.`,
              "Press Retry Connection to try again."],
            buttonText: "Retry",
            buttonDest: doAttemptConnection
          });
          break;
      }
    }

    function doStart() {
      console.log("starting");
      selectStage(stages.ConnectUSB);
    }

    function doConnectToDevice() {
      selectStage(stages.ConnectToDevice);
    }

    async function doAttemptConnection() {
      let worked = await connect();
      if (worked) {
        selectStage(stages.StartFlash);
      }
      else {
        selectStage(stages.ConnectFailed);
      }
    }

    async function doStartFlash() {
      await doFlash();
      window.location.href = '/configureWiFi';
    }

    function addLineToLog(message) {
      let output = document.getElementById('logOutput');
      output.value = output.value + message + '\n';
      output.scrollTop = output.scrollHeight;
    }

    function addTextToTerminal(text) {
      let output = document.getElementById('terminal');
      output.value = output.value + text;
      output.scrollTop = output.scrollHeight;
    }

    async function connect() {
      console.log("Connecting..");

      if (device === null) {
        device = new ESPManager(addLineToLog);
      }

      let { worked, message } = await device.connect();

      if (!worked) {
        alert(message);
        connected = false;
        return false;
      }
      else {
        connected = true;
        return true;
      }
    }

    function doTerminalOutputKeypress() {
      alert("Type your input into the window below the terminal output");
    }

    async function doTerminalInputKeypress(event) {
      if (event.keyCode == 13) {
        await doSend();
      }
    }

    async function doFlash() {

      // Automatically connect if we have not been connected already

      if (!connected) {
        let result = await connect();
        if (!result) {
          return false;
        }
      }

      console.log("Flashing..");

      let { worked, message } = await device.flashDevice();

      console.log(message);

      if (!worked) {
        alert(message);
      }
      connected = false;
      return true;
    }

    async function doConnect() {
      let result = await connect();
      if (result) {

      }
    }

    function handleIncomingText(text) {
      let output = document.getElementById('terminalOutput');
      output.value = output.value + text;
      output.scrollTop = output.scrollHeight;
    }

    async function doTerminal() {
      if (terminal == null) {
        terminal = new Terminal();
      }
      let reply = await terminal.connectToSerialPort();

      if (reply != "") {
        alert(reply);
        return;
      }
      terminal.startSerialPump(handleIncomingText);
      handleIncomingText("Terminal connected\n");
    }

    async function doSend() {
      if (terminal == null) {
        await doTerminal();
      }
      let input = document.getElementById('terminalInput');
      let text = input.value;
      text = text + '\n\r';
      await terminal.sendText(text);
      input.value = "";
    }

    async function doCheckBrowser() {
      let para = document.getElementById("browsermessage");
      if ("serial" in navigator) {
        this.port = null;
        para.textContent = "This browser supports serial connection. Connect your device using a USB cable to begin programming it.";
      }
      else {
        para.textContent = "This browser does not support serial connection. You will have to download a browser based on the Chromium platform"
        "We suggest Microsoft Edge or Google Chrome.";
      }
    }

  </script>
</body>

</html>